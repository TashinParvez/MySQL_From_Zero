
//                         ╔═══════════════════════════════════════════════════════════════════════════════════════════╗
//                         ║                                                                                           ║
//                         ║                                Author: Tashin Parvez                                      ║
//                         ║                            United International University                                ║
//                         ║                                                                                           ║
//                         ╚═══════════════════════════════════════════════════════════════════════════════════════════╝




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   DDL  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


-----------------------  Create DATABASE  --------------------

WAY 1: CREATE DATAB ASE [database_Name];
       -> SHOW ERROR IF DATABASE exist
WAY 2: CREATE DATABASE IF NOT EXISTS [database_Name];
       -> Don't SHOW ERROR IF DATABASE exist



-----------------------  DELETE DATABASE  ---------------------

WAY 1: DROP DATABASE [database_Name];             ----> SHOW ERROR
WAY 2: DROP DATABASE IF EXISTS [database_Name];   ----> Don't SHOW ERROR



-----------------------  CREATE TABLE  ----------------------

CREATE TABLE [table_name](
       coll_Name   datatype_name    [NOT NULL] [DEFAULT def_Value] [AUTO_INCREMENT],
       coll_Name   datatype_name    [NOT NULL] [DEFAULT def_Value] [AUTO_INCREMENT],
       ...
       ...
       coll_Name   datatype_name     [PRIMARY KEY] [UNIQUE]  [NOT NULL] [DEFAULT def_Value] [AUTO_INCREMENT],


       CONSTRAINT  constrain_name  PRIMARY KEY(coll_Name, coll_Name_2),     /// No Space btwn ->  KEY() 
                                                                            /// Declare primary key side to the datatype name is a bad practice
       CONSTRAINT  constrain_name  UNIQUE(coll_Name_3, coll_Name_4),       


       CONSTRAINT  constrain_name  FOREIGN KEY(coll_Name_5, coll_Name_6)
                                   REFERENCES ref_table_Name(ref_Table_colm_Name, ref_Table_colm_Name_2)    /// No comma no semiacolon in the last line
                     
);


/* -->>  SYMBOLES

- Yellow Key = PRIMARY KEY
- Gray   KEY = UNIQUE

*/


CREATE TABLE IF NOT EXISTS [table_name](

)



-----------------------  DELETE TABLE  ----------------------
 
WAY 1: DROP TABLE [table_Name];
       -> SHOW ERROR
WAY 2: DROP TABLE IF EXISTS [table_Name];  -- Don't SHOW ERROR (Just give a warning)



-----------------------  Shortcuts  ----------------------

1. ctrl + Enter  ---->  Go Click



----------------- ADD/DROP column -----------------

ALTER TABLE [table_Name] ADD COLUMN [coll_Name] [data_Type] [NOT NULL] [UNIQUE] [DEFAULT def_value] [PRIMARY KEY] [AUTO_INCREMENT]

ALTER TABLE [table_Name] DROP COLUMN [coll_Name]



----------------- ADD/DROP PRIMARY KEY -----------------


ALTER TABLE [table_Name] ADD PRIMARY KEY( Attribute_1 )    /// Single key 

ALTER TABLE [table_Name] ADD PRIMARY KEY ( Attribute_1, Attribute_2 )   /// Composite Key

ALTER TABLE [table_Name] DROP PRIMARY KEY



----------------- ADD/DROP UNIQUE constraint -----------------

ALTER TABLE [table_name]
CONSTRAINT [constrain_name] UNIQUE( attrib_1, attrib_2) 

ALTER TABLE [table_name]
DROP CONSTRAINT [constrain_name] 



----------------- ADD/DROP FOREIGN KEY -----------------

ALTER TABLE [table_Name] DROP FOREIGN KEY [constrain_name]

ALTER TABLE [table_Name] ADD CONSTRAINT [constrain_name] FOREIGN KEY( Attribute_1, Attribute_2 )  REFERENCES [ref_table_Name](ref_Table_colm_Name, ref_Table_colm_Name_2) 



----------------- ADD/DROP DEFAULT constraint -----------------

ALTER TABLE [table_name]
ALTER COLUMN [coll_Name] SET DEFAULT [def_Value] 
 
ALTER TABLE [table_name]
ALTER COLUMN [coll_Name] DROP DEFAULT 


----------------- MODIFY COLOUM Type -----------------

ALTER TABLE [table_Name] MODIFY COLUMN [coll_Name] [new_DATA_type]



----------------- RENAME TABLE Name -----------------

ALTER TABLE [table_Name] RENAME [table_Name]


----------------- Comment -----------------
#        This is single line comment


/*          This 
             is 
          multiple
            line 
           comment                
*/






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   DML  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<




----------------- DATA Insert INTO TABLE -----------------

INSERT INTO [table_Name](attrib_1, attrib_2, attrib_2, attrib_3, attrib_4)           /// Dont forget to insert data in PRIMARY KEY
VALUES (coll1_val, coll2_val,  coll3_val, coll4_val)                                 /// Follow the above serial
---- When you want to insert data to a few column


INSERT INTO [table_Name] 
VALUES (coll1_val, coll2_val,  coll3_val, coll4_val)                                /// FOLLOW table structure Serial [Coloum Order wise]
---- When you want to instert data in every column


INSERT INTO [table_Name] 
VALUES (coll1_val, coll2_val,  coll3_val, coll4_val), (coll1_val, coll2_val,  coll3_val, coll4_val), (coll1_val, coll2_val,  coll3_val, coll4_val)
---- Multiple data insert 



----------------- DATA UPDATE TABLE ----------------- ************************

UPDATE [table_name]
SET coll1 = value1 , coll2 = value2, ....
WHERE [condition];

---- IF you dont write WHERE then every row's data will be update
---- 

/*
   Condition will be on column
   Example: 
   CGPA < 3.35
   id IS NOT NULL
*/


----------------- DATA DELETE FROM TABLE ----------------- ************************

DELETE FROM table_name
WHERE [condition];

/*
   Condition will be on column
   Example: 
   CGPA < 3.35
   id IS NOT NULL
*/




************************************************ DATA Search INTO TABLE ************************************************
/*
    Temporary view of the table (NO EFFECT ON TABLE / NO DATA LOSS)
*/

************************ Read Full DATABASE
SELECT *
FROM [table_name]

/*
   * = all column
   default = all row (WERE IS NOT GIVEN)
*/

--- Try to READ less as much as you can




********************** READ Few Column (COLUMN Filter / Show specific COLUMN)

SELET coll_1, 
      coll_2
FROM [table_Name]


/*
Only coll1 and coll2 will be show
*/


********************** Column aliasing (COLUMN Renaming / Do Calculation in COLUMN)

---->>  Can USE alicasing: GROUP BY, HAVING, ORDER USE


SELET coll_1 + 3, 
      coll_2 * 4
FROM [table_Name]

        --------------------

SELET coll_1 + coll_4, 
      coll_2 / coll_5
FROM [table_Name]

/*
column names will be  coll_1 + coll_4,  coll_2 / coll_5
*/


SELET coll_1 + coll_4 AS new_Coll_name_1, 
      coll_2 / coll_5 AS new_coll_name_2
FROM [table_Name]

/*
column names will be  new_Coll_name_1,  new_coll_name_2
*/


/* Example

SELECT employee_id ,
	salary/1000,
       salary + salary*commission_pct AS TOTAL_Salary
FROM employees;

*/

///  salary/1000 ----> show salary in thousand formate




************* ROW Filtering (Showing specific row)  *************************

SELECT coll_1, coll_2
FROM [table_name]
WHERE [condition]


/*
  MySQL 
  ------------------------
  and operation:  AND, &&
  or Operation: OR, ||
  not Operation: NOT, !

  ------------------------
  DESC --> Big to small
  ASC  --> small to Big
*/


/*
   Condition will be on column
   Examples of Condition:
   CGPA < 3.35
   id IS NOT NULL
   coll_1 > Coll_4
   (coll_1 > Coll_4)  AND (coll_1 > Coll_2)
   dept = 50 OR salary > 1000
*/




****************** Showing sorted DATA ******************

SELECT coll_1, coll_2
FROM [table_name]
WHERE [condition]
ORDER BY coll_name [ASC|DESC], coll_name [ASC|DESC] , .........



/*
SELECT first_name,
		email,
        salary,
        2024 - YEAR(hire_date) AS experience
        
FROM employees
ORDER BY (2024 - YEAR(hire_date)) DESC
*/




****************** Showing distinct rows/data ******************

SELECT DISTINCT [coll1_name]
FROM [table_Name]


/*
    Show only coll 1 distinct elements
*/


SELECT DISTINCT [coll1_name], [coll2_name]
FROM [table_Name]


/*
    Show only (coll 1 and coll 2) [act as one element] distinct elements
*/





****************** Showing LIMITED NUMBER OF rows (lIMIT Operation) ******************

------ Way 1
SELECT DISTINCT [coll_name]
FROM [table_name]
where [condition]
ORDER BY [coll_name] DESC
LIMIT [show];  -----------------------> Show top 3



//*  Example: 
     
SELECT DISTINCT salary
FROM employees

ORDER BY salary desc
LIMIT  3;
*//


---------------- Way 2

SELECT DISTINCT [coll_name]
FROM [table_name]
ORDER BY [coll_name] DESC
LIMIT [offset/drop/index_included], [show]; ----------> 
     
/// Offset optional [no optional means way 1]
/// Index start from 0(zero)



//*  Example: 
     
SELECT DISTINCT salary
FROM employees

ORDER BY salary desc
LIMIT  1, 5; ---------------> 
    
*//




****************** Variations ******************

--------- Div: 

10 DIV 4 = 2    (Integer)
10 / 4   = 2.5  (Float)


--------- Between...AND:

SELECT [coll_name]
FROM [table_name]
# where salary >=1000 AND salary<=10000  ------> OLD APPROACH

WHERE salary BETWEEN 1000 AND 10000      ------> two values are (** included **)



--------- NOT Between...AND:

SELECT [coll_name]
FROM [table_name]
# where salary < 1000 AND salary > 10000  ------> OLD APPROACH

WHERE salary NOT BETWEEN 1000 AND 10000      ------> two values are excluded




--------- IN :

SELECT [coll_name]
FROM [table_name]
# where manager_id = 101 OR manager_id = 201 OR manager_id = 301  ------> OLD APPROACH

WHERE manager_id IN(101, 201, 301)     ------>  equal (equal check for few Values)




--------- NOT IN :

WHERE manager_id NOT IN(101, 201, 301)     ------>  not equal


--------------------------------------------------------------------------------------------
-------------....----------       String Operations      -----------------------------------
------------....----------- LIKE (String pattern Match) ------------------------------------
--------------------------------------------------------------------------------------------

%  (percentage) : 0 to inf Char (as start operation on TOC)
_ (underscore)  : exactaly one char


SELECT [coll_name]
FROM [table_name]
WHERE [coll_name] LIKE "want_to_match"           ///----->>  (LIKE)  Operation


/* 
       SELECT *
       FROM employees
       WHERE last_name LIKE "%g";              ///----> LAst name ends with 'g'
*/


LENGTH(coll1)   ///--------> Know string length 

--------------------------------- Boolean ---------------------------------------------


SELECT [coll_name]
FROM [table_name]
WHERE [coll_name] IS [TRUE or FALSE]







----------------------- Condition Statement (CASE WHEN) ---------------------------
/*

*/

SELECT [coll_name],
       CASE
              WHEN [salary_coll]>2000 THEN 'A'
              WHEN [salary_coll] BETWEEN THEN 'B'
              ELSE 'C'
       END AS 'Salary_rank_Coll_name'
FROM [table_name]
WHERE [condition]






/*
       Numeric,String, DATE function Works Row Wise
       You can use func in SELECT and WHERE

*/



----------------------- Numeric Functions ---------------------------


ABS()         ---->  SELECT ABS([coll_name])

FLOOR()       ---->  SELECT FLOOR([coll_name])

CEIL()       ---->  SELECT CEIL([coll_name])



ROUND(x)/Round(x,D) ------> SELECT ROUND([coll_name])

Example: 
SELECT ROUND(1.34)         ---> 1
SELECT ROUND(1.34, 1)      ---> 1.3
SELECT ROUND(1.45678, 3)   ---> 1.457       ///--->  ROUND decimal Value



TRUNCATE(x,D)      -------> SELECT TRUNCATE([coll_name])

Example:  
SELECT TRUNCATE(1.34, 1)      ---> 1.3
SELECT TRUNCATE(1.45, 1)      ---> 1.4 






----------------------- String Functions ---------------------------

UPPER()  
LOWER()
REVERSE()

CONCATE()  ----> concatenation of string 

Example: CONCAT(first_name,' ', last_name) AS full_Name


/// bIG Example

SELECT employee_id,first_name,
		CASE 
       		WHEN salary>=1000 THEN
				CONCAT(
            		salary DIV 1000,' Thousands ',
            		(salary%1000) DIV 100, ' Hundreds ',
            		salary % 100, ' Taka'
            		  )
            WHEN salary>=100  THEN
				CONCAT(
            		(salary) DIV 100, ' Hundreds ',
            		salary % 100, ' Taka'
            		  )	
            ELSE
				CONCAT( 
            		salary % 100, ' Taka'
            		)	
            
		END AS AMOUNT, salary
FROM employees
ORDER BY salary ASC;


///




SUBSTR(str,pos)      ------> SUBSTR(first_name , 3)   [3rd position included] 
                     ------> output(first_name's 3rd index to last)
                     ------> String index count from 1



SUBSTR(str,pos,len)      ------> SUBSTR(first_name , 3, 4)   [From 3rd position and Take 4 index, index start from 1]


LEFT(str, len)           ------> LEFT('abcd', 2) => ab
RIGHT(str,len)           ------> RIGHT('abcd', 2) => cd




----------- LPAD ----------- (Increase string Length)

LPAD(str, len, padstr)    

/// SELECT LPAD('abcd', 8, 'xyz') 
/// -- Output: xyzxabcd  
///            ----



RPAD(str, len, padstr)

/// SELECT RPAD('abcd',6,'x')
/// -- Output:  abcdxx
///                 --




/**** BIG EXAMPLE

SELECT employee_id,
		LOWER(
			CONCAT(
				SUBSTR(first_name,1,2)
        		,'_',            
           	 RIGHT(last_name,2)
          	  )
        ) AS Code_NAME
FROM employees
ORDER BY salary ASC;

-------------------------> MORE WORK ( COUNT THER TOTAL LEn id and put len-4 starts in the code Name )

***/






-----------------------------------------------------------------------
----------------------- DATE TIME Functions ---------------------------
-----------------------------------------------------------------------


NOW()             -----------> returns the current datetime
CURDATE()         -----------> returns the current date
CURTIME()         -----------> returns the current time



DATE(datetime)      --------------> only date part      
TIME(datetime)      --------------> only time part
HOUR(datetime)      --------------> only hour part
MINUTE(datetime)    --------------> only minute part
SECOND(datetime)    --------------> only second part
DAY(datetime)       --------------> only day part
MONTH(datetime)     --------------> only month part
YEAR(datetime)      --------------> only year part




DATEDIFF(datetime1, datetime2)    ------------>  Return number of days
TIMEDIFF(datetime1, datetime2)    ------------>  Return time diff



DATE_ADD(datetime, INTERVAL n unit)                 ///  unit = SECOND /MINUTE /HOUR / DAY /MONTH /YEAR
DATE_SUB(datetime, INTERVAL n unit) 

EXAMPLE:  DATE_ADD(hire_date, INTERVAL 1 DAY)






-----------------------------------------------------------------------
-------------------------- NULL Problem -------------------------------
----------------------- COALESCE Functions ----------------------------
-----------------------------------------------------------------------

// If MySQL find NULL one in a calculation then it stop calculation

COALESCE() ---> Return first Not Null value 


COALESCE(NULL, 10, 100, NULL)  ----> return 10
COALESCE(10, 21, 100, NULL)  ----> return 10
COALESCE(10, 21, 100, NULL)  ----> return 10


Example 1:
SELECT (salary + salary*COALESCE(Increment, 0)) AS Total_Salary


Example 2:
SELECT customer_mail, COALESCE(salary + (salary*12), 0) AS total_salary
From customer;






-----------------------------------------------------------------------
----------------------------- UNION -----------------------------------
-----------------------------------------------------------------------


Example: 1
--------------------------------------
(
       SELECT first_name, manager_id
       FROM employees
       WHERE manager_id = 100
)      UNION
(
       SELECT first_name, manager_id
       FROM employees
       WHERE manager_id = 114
);



-----------------------------------------------------------------------
--------------------------- INTERSECT ---------------------------------
-----------------------------------------------------------------------


Example: 1
--------------------------------------

(
       SELECT first_name, manager_id, salary
       FROM employees
       WHERE manager_id = 100
)      INTERSECT                                   ///----> (A intersection B)
(
       SELECT first_name, manager_id, salary
       FROM employees
       WHERE salary>5000
);



-----------------------------------------------------------------------
--------------------------- except ---------------------------------
-----------------------------------------------------------------------


Example: 1
--------------------------------------
(
       SELECT first_name, manager_id, salary
       FROM employees
       WHERE manager_id = 100
)      except                                       ///----> (A-B)
(
       SELECT first_name, manager_id, salary
       FROM employees
       WHERE salary>5000
);







                                        -------------------------------------------------------------------------
                                                                  Aggregat, Join
                                                  ------------------------------------------->  
                                         (Basic)    ------------------------------------------->    (Advanced)
                                                  ------------------------------------------->  
                                        
                                        -------------------------------------------------------------------------





>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>                       <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Aggregate Function  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Group Wise Func    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


--> SELECT groupFunc(Coll_1)    /// menas it will aply on whol column


Aggregate Function
-------------------
MAX(Coll_1)   , MAX(DISTINCT Coll_1) 
MIN(Coll_1)   , MIN(DISTINCT Coll_1) 
SUM(Coll_1)   , SUM(Coll_1) 
AVG(Coll_1)   , AVG(Coll_1)  
COUNT(Coll_1) , COUNT(Coll_1) , COUNT(*) 


///  COUNT(*) ---> to solve Null not count problem, count(*) will take full row as a input and NULL will not create problem



/*

SELECT    (Aggregat_Func)
FROM
WHERE
ORDER BY
LIMIT

*/



SELECT MAX(Coll_1), MIN(Coll_1), COUNT(Coll_1), SUM(Coll_1) , AVG(Coll_1) 


---> Output: No of Rows == Num of Groups  
 
---> default : Full table 1 group (So output one Row) 






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      Creating Group      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



/*

SELECT
FROM
WHERE

GROUP BY    Coll_1, Coll_2.. | Expression_1, Expression_2....    <<----------------

ORDER BY
LIMIT

*/



----> When using Group By You can't print a column, cz it's already in a Group.
----> For showing column data you have to use aggregate Func.
----> 




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>    Group Filtering      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/*

SELECT
FROM
WHERE        <<<------------- Filter before creating Group
GROUP BY    
ORDER BY
LIMIT

*/


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  Having 

--> If you want to filter after creating Group.
--> USED for Group filter ***

/*

SELECT
FROM
WHERE       
GROUP BY    

HAVING condition        <<<----- Aggregat Func related condition

ORDER BY
LIMIT

*/



EXAMPLE 1: 
--------------------
SELECT  LEFT(first_name,1) AS First_Char , COUNT(*)
FROM employees
WHERE job_id != 'IT_PROG'
GROUP BY LEFT(first_name,1)
HAVING COUNT(*)>=5
ORDER BY COUNT(*) ASC;


EXAMPLE 2: 
--------------------
SELECT  SUBSTR(phone_number,5,3)  AS Mid_3 , COUNT(*)
FROM employees 
GROUP BY SUBSTR(phone_number,5,3);


EXAMPLE 3: 
--------------------
SELECT YEAR(hire_date) as YR, MONTH(hire_date) ,COUNT(*) 
FROM employees 
GROUP BY YR, MONTH(hire_date)
ORDER BY hire_date;


EXAMPLE 4: 
--------------------
SELECT department_id,
	CASE
	     WHEN salary<10000 THEN 'A'
            WHEN 10000<= salary <= 20000 THEN 'B'
            ELSE 'C'
        END AS SALARY_class,
        AVG(salary) 
FROM employees 
GROUP BY department_id, SALARY_class
ORDER BY department_id;











>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>                      <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Join Function  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   Group Wise Func    <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1. Join / Inner Join / Cross Join
2. Left Join / Left Outer Join


why Join?
- if have primary and foreign key then can do Join operation
- Max 61 table's can join



Table Alising
--------------------------------------
SELECT T1.name , 
FROM table_name as T1 , table_name2 AS 'child of T1'   ///----> if have space then in invated choma(as string), else as usual

all column ----> *
T1 table, all column ----> T1.*



---------------------------------------------------------

ROW filter - WHERE
Group filter -  HAVING

Table Join  - On condition

---------------------------------------------------------

JOIN condition :  T1.Coll1 = T2.Coll2    ///---> How many rows will be created in resultant table depends on this condition



------------------------- Join / Inner Join / Cross Join --------------------------------

SELECT .......

FROM table_1 AS t1

      Join
      table_2 AS t2
      ON [JOIN_Condition]
      
      Join
      table_3 AS t3
      ON [JOIN_Condition]
      .
      .
      .
      .
      Join
      table_4 AS t4
      ON [JOIN_Condition]
      

WHERE



------------------------- Left Join / Left Outer Join --------------------------------


SELECT .......

FROM table_1 AS t1            /// Left table  [ALL DATA will must come in the resultant Table]

      Join
      table_2 AS t2           /// Right Table
      ON [JOIN_Condition]
      
      LEFT JOIN
      table_3 AS t3
      ON [JOIN_Condition]
      .
      .
      .
      .
      Join
      table_4 AS t4
      ON [JOIN_Condition]
      

WHERE




------------------------- RIGHT Join --------------------------------

SELECT .......

FROM table_1 AS t1            /// Left table  

      Join
      table_2 AS t2           /// Right Table [ALL DATA will must come in the resultant Table]
      ON [JOIN_Condition]

WHERE




# Example 1:
-------------------------------
SELECT  emp.first_name , 
		jobs.job_title, 
		dept.department_name,
        loc.city

FROM  employees as emp
		JOIN 
        jobs
        ON emp.job_id = jobs.job_id
       
        JOIN
        departments AS dept
        ON emp.department_id = dept.department_id
        
        JOIN 
        locations AS loc 
        ON dept.location_id = loc.location_id 
       






------------------------- SELF Join  (Important)--------------------------------


# Example 1:
-------------------------------
SELECT emp.employee_id,
		emp.first_name,
        manag.manager_id,
        manag.first_name

FROM employees AS emp 
    	JOIN 
        employees AS manag 
        ON  emp.manager_id = manag.employee_id








>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   SubQuery  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



-> select query within other query
-> Inner and Outer Query
-> Inner query select (always)
   Outer query delete, update, Insert (Can change)
-> Subquery always write in a first bracket
-> Inner Query execute first



                                                     -------------------------------------------
                                                     ------ Variation 1: Scalar Subquery -------
                                                     -------------------------------------------

- Return Constant Value (one cell)
- Where I can write constant ther I can write Scalar_Subquery



SELECT    coll_name, (Scalar_Subquery)
FROM      ...
WHERE     conditon > (Scalar_Subquery)
GROUP BY  ...
HAVING    SUM() > (Scalar_Subquery)                



EXAMPLE 1:
----------------------
# Show all those employee details who works in the same dept as emoployee id 110.

SELECT *
FROM employees
WHERE department_id = (
       SELECT department_id
       FROM employees
       WHERE employee_id = 110
);






EXAMPLE 2:
----------------------

# Shows all those emoployee details 
# whose manager and (employee id 120 manager) are same and 
# Whose dept id is also same as emoployee id 130 

SELECT *
FROM employees
WHERE manager_id = (
	SELECT manager_id
    FROM employees
    WHERE employee_id = 120
) 
AND
department_id = (
    SELECT department_id
    FROM employees
    WHERE employee_id = 130
);






Example 3: 
-----------------------
# Show all those employee details 
# who receives higher salary than the avg salary provided bt department id 90

SELECT *
FROM employees
WHERE salary > (
    SELECT AVG(salary)
    FROM employees
    WHERE department_id = 90
)








                                      -------------------------------------------
                                      ------ Variation 2: Column Subquery -------
                                      -------------------------------------------

-> Inner Query Return 1 COll (Multiple rows/values)
   [it could be a list or tupple]

-> ANY, ALL , IN, SOME 
-> ANY = SOME = IN


--> value > ANY (10, 20, 30)        ///--->   if one is true then true
--> value > ALL (10, 20, 30)       ///--->   if ALL true then true



Example: 1
-------------------
SELECT *
FROM employees
WHERE salary > ANY (
    SELECT salary
    FROM employees
    WHERE department_id = 100
)
AND department_id = 100;




Example: 2
-------------------
SELECT *
FROM employees
WHERE salary > ANY (
    SELECT MAX(salary)
    FROM employees
    GROUP BY department_id
)


Example: 3
-------------------
SELECT *
FROM employees AS e  
WHERE job_id !='IT_PROG' AND
	salary < any (
    	SELECT salary
    	FROM employees
        WHERE job_id = 'IT_PROG'
    )






                                      -------------------------------------------
                                      -------- Variation 3: ROW Subquery --------
                                      -------------------------------------------



-> Inner Query Return 1 ROW (Multiple COLUMN)  



Example: 1
---------------------------------------------

# Show all those emoployeE DETAILS 
# who works in the same dept as employee id 110 and
# also who receives the same salary of employee id 110          ///--->   checking 2(multiple) value with the one particular person  



///----------( Solve using collumn subquery )---------------

SELECT *
FROM employees
WHERE department_id = (
    SELECT department_id
    FROM employees
    WHERE employee_id = 110
) AND
salary = (
    	SELECT salary
        FROM employees
        WHERE employee_id = 110
)


///----------( Solve using row subquery )---------------

SELECT *
FROM employees
WHERE (department_id, salary) = (
    	SELECT department_id, salary  # one row           ///--->> order should be maintained
        FROM employees
        WHERE employee_id = 110 
);








                                      -------------------------------------------
                                      -------- Variation 4: Derived table -------
                                      -------------------------------------------

-> Inner query returns a table (have multiple table, multiple columns)
    | -> requared table = temporary table
    | -> Table aliasing must





Example : 1
----------------

# Show the manager id who manage minimum num of employee

SELECT manager_id, min(Mt.empCount)
FROM (
    SELECT manager_id, COUNT(employee_id) AS empCount
    FROM employees
    GROUP BY manager_id
) AS Mt

WHERE manager_id IS NOT NULL



Example : 2
----------------
# Show the dept name who spend min salary for therir employee

SELECT department_id, MIN(totalSalary)
FROM (
    SELECT department_id, SUM(salary) as totalSalary
    FROM employees
    GROUP BY department_id 
)AS dt;





** Example : 3 **
----------------
# for each year, find out minimum number of employee hired by a department

SELECT year, department_id, MIN(totalEmp) AS emp_hire
FROM(
    SELECT COUNT(employee_id) as totalEmp, YEAR(hire_date) AS year, department_id
    FROM employees
    GROUP BY YEAR(hire_date), department_id
    ) AS nt
GROUP BY nt.year
ORDER BY year;





** Example : 4 ** 
----------------
# for each employee, show emp_id , total no of emp hired after him and total no of emp hired before him

SELECT   af.id AS emp_id, 
         af.cnt AS after_JOIN, 
         bf.cnt AS before_JOIN 

FROM (
       SELECT myself.employee_id as id, COUNT(*) as cnt
       FROM employees as myself 
	       CROSS JOIN
              employees AS col
              ON myself.hire_date < col.hire_date 
       GROUP BY myself.employee_id
       ) AS af

       INNER JOIN(
       SELECT myself.employee_id as id, COUNT(*) as cnt
       FROM employees as myself
           	CROSS JOIN
              employees AS col 
              ON myself.hire_date > col.hire_date
       GROUP BY myself.employee_id
       ) AS bf

       ON af.id = bf.id

ORDER BY af.id;







                                      -------------------------------------------
                                      ------ Variation 5: Corelated Subquery -----
                                      -------------------------------------------

-> Corelated means Dependent
-> Inner query references/depends on Outer query table

||  one value match check in outer query
||  another one check in Inner query
||
||



Example 1 **
------------------------------------------

# show the emp info
# who is having max salary of that department 

//----------------------- USING Row SubQuery
SELECT *
FROM employees
WHERE (salary, department_id) in (
    SELECT max(salary), department_id
	FROM employees
	GROUP BY department_id
);

//----------------------- USING Corelated SubQuery

SELECT *
FROM employees as e 
WHERE salary in (
    SELECT MAX(salary)
	FROM employees as d 
	WHERE e.department_id = d.department_id
    GROUP by department_id
);





















