
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   DDL  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


-----------------------  Create DATABASE  --------------------

WAY 1: CREATE DATAB ASE [database_Name];
       -> SHOW ERROR IF DATABASE exist
WAY 2: CREATE DATABASE IF NOT EXISTS [database_Name];
       -> Don't SHOW ERROR IF DATABASE exist



-----------------------  DELETE DATABASE  ---------------------

WAY 1: DROP DATABASE [database_Name];             ----> SHOW ERROR
WAY 2: DROP DATABASE IF EXISTS [database_Name];   ----> Don't SHOW ERROR



-----------------------  CREATE TABLE  ----------------------

CREATE TABLE [table_name](
       coll_Name   datatype_name    [NOT NULL] [DEFAULT def_Value] [AUTO_INCREMENT],
       coll_Name   datatype_name    [NOT NULL] [DEFAULT def_Value] [AUTO_INCREMENT],
       ...
       ...
       coll_Name   datatype_name     [PRIMARY KEY] [UNIQUE]  [NOT NULL] [DEFAULT def_Value] [AUTO_INCREMENT],


       CONSTRAINT  constrain_name  PRIMARY KEY(coll_Name, coll_Name_2),     /// No Space btwn ->  KEY() 
                                                                            /// Declare primary key side to the datatype name is a bad practice
       CONSTRAINT  constrain_name  UNIQUE(coll_Name_3, coll_Name_4),       


       CONSTRAINT  constrain_name  FOREIGN KEY(coll_Name_5, coll_Name_6)
                                   REFERENCES ref_table_Name(ref_Table_colm_Name, ref_Table_colm_Name_2)    /// No comma no semiacolon in the last line
                     
);


/* -->>  SYMBOLES

- Yellow Key = PRIMARY KEY
- Gray   KEY = UNIQUE

*/


CREATE TABLE IF NOT EXISTS [table_name](

)



-----------------------  DELETE TABLE  ----------------------
 
WAY 1: DROP TABLE [table_Name];
       -> SHOW ERROR
WAY 2: DROP TABLE IF EXISTS [table_Name];  -- Don't SHOW ERROR (Just give a warning)



-----------------------  Shortcuts  ----------------------

1. ctrl + Enter  ---->  Go Click



----------------- ADD/DROP column -----------------

ALTER TABLE [table_Name] ADD COLUMN [coll_Name] [data_Type] [NOT NULL] [UNIQUE] [DEFAULT def_value] [PRIMARY KEY] [AUTO_INCREMENT]

ALTER TABLE [table_Name] DROP COLUMN [coll_Name]



----------------- ADD/DROP PRIMARY KEY -----------------


ALTER TABLE [table_Name] ADD PRIMARY KEY( Attribute_1 )    /// Single key 

ALTER TABLE [table_Name] ADD PRIMARY KEY ( Attribute_1, Attribute_2 )   /// Composite Key

ALTER TABLE [table_Name] DROP PRIMARY KEY



----------------- ADD/DROP UNIQUE constraint -----------------

ALTER TABLE [table_name]
CONSTRAINT [constrain_name] UNIQUE( attrib_1, attrib_2) 

ALTER TABLE [table_name]
DROP CONSTRAINT [constrain_name] 



----------------- ADD/DROP FOREIGN KEY -----------------

ALTER TABLE [table_Name] DROP FOREIGN KEY [constrain_name]

ALTER TABLE [table_Name] ADD CONSTRAINT [constrain_name] FOREIGN KEY( Attribute_1, Attribute_2 )  REFERENCES [ref_table_Name](ref_Table_colm_Name, ref_Table_colm_Name_2) 



----------------- ADD/DROP DEFAULT constraint -----------------

ALTER TABLE [table_name]
ALTER COLUMN [coll_Name] SET DEFAULT [def_Value] 
 
ALTER TABLE [table_name]
ALTER COLUMN [coll_Name] DROP DEFAULT 


----------------- MODIFY COLOUM Type -----------------

ALTER TABLE [table_Name] MODIFY COLUMN [coll_Name] [new_DATA_type]



----------------- RENAME TABLE Name -----------------

ALTER TABLE [table_Name] RENAME [table_Name]


----------------- Comment -----------------
#        This is single line comment


/*          This 
             is 
          multiple
            line 
           comment                
*/






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   DML  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<




----------------- DATA Insert INTO TABLE -----------------

INSERT INTO [table_Name](attrib_1, attrib_2, attrib_2, attrib_3, attrib_4)           /// Dont forget to insert data in PRIMARY KEY
VALUES (coll1_val, coll2_val,  coll3_val, coll4_val)                                 /// Follow the above serial
---- When you want to insert data to a few column


INSERT INTO [table_Name] 
VALUES (coll1_val, coll2_val,  coll3_val, coll4_val)                                /// FOLLOW table structure Serial [Coloum Order wise]
---- When you want to instert data in every column


INSERT INTO [table_Name] 
VALUES (coll1_val, coll2_val,  coll3_val, coll4_val), (coll1_val, coll2_val,  coll3_val, coll4_val), (coll1_val, coll2_val,  coll3_val, coll4_val)
---- Multiple data insert 



----------------- DATA UPDATE TABLE ----------------- ************************

UPDATE [table_name]
SET coll1 = value1 , coll2 = value2, ....
WHERE [condition];

---- IF you dont write WHERE then every row's data will be update
---- 

/*
   Condition will be on column
   Example: 
   CGPA < 3.35
   id IS NOT NULL
*/


----------------- DATA DELETE FROM TABLE ----------------- ************************

DELETE FROM table_name
WHERE [condition];

/*
   Condition will be on column
   Example: 
   CGPA < 3.35
   id IS NOT NULL
*/




************************************************ DATA Search INTO TABLE ************************************************
/*
    Temporary view of the table (NO EFFECT ON TABLE / NO DATA LOSS)
*/

************************ Read Full DATABASE
SELECT *
FROM [table_name]

/*
   * = all column
   default = all row (WERE IS NOT GIVEN)
*/

--- Try to READ less as much as you can




********************** READ Few Column (COLUMN Filter / Show specific COLUMN)

SELET coll_1, 
      coll_2
FROM [table_Name]


/*
Only coll1 and coll2 will be show
*/


********************** Column aliasing (COLUMN Renaming / Do Calculation in COLUMN)

SELET coll_1 + 3, 
      coll_2 * 4
FROM [table_Name]

        --------------------

SELET coll_1 + coll_4, 
      coll_2 / coll_5
FROM [table_Name]

/*
column names will be  coll_1 + coll_4,  coll_2 / coll_5
*/


SELET coll_1 + coll_4 AS new_Coll_name_1, 
      coll_2 / coll_5 AS new_coll_name_2
FROM [table_Name]

/*
column names will be  new_Coll_name_1,  new_coll_name_2
*/


/* Example

SELECT employee_id ,
	salary/1000,
       salary + salary*commission_pct AS TOTAL_Salary
FROM employees;

*/

///  salary/1000 ----> show salary in thousand formate




************* ROW Filtering (Showing specific row)  *************************

SELECT coll_1, coll_2
FROM [table_name]
WHERE [condition]


/*
  MySQL 
  ------------------------
  and operation:  AND, &&
  or Operation: OR, ||
  not Operation: NOT, !

  ------------------------
  DESC --> Big to small
  ASC  --> small to Big
*/


/*
   Condition will be on column
   Examples of Condition:
   CGPA < 3.35
   id IS NOT NULL
   coll_1 > Coll_4
   (coll_1 > Coll_4)  AND (coll_1 > Coll_2)
   dept = 50 OR salary > 1000
*/




****************** Showing sorted DATA ******************

SELECT coll_1, coll_2
FROM [table_name]
WHERE [condition]
ORDER BY coll_name [ASC|DESC], coll_name [ASC|DESC] 



/*
SELECT first_name,
		email,
        salary,
        2024 - YEAR(hire_date) AS experience
        
FROM employees
ORDER BY (2024 - YEAR(hire_date)) DESC
*/




****************** Showing distinct rows/data ******************

SELECT DISTINCT [coll1_name]
FROM [table_Name]


/*
    Show only coll 1 distinct elements
*/


SELECT DISTINCT [coll1_name], [coll2_name]
FROM [table_Name]


/*
    Show only (coll 1 and coll 2) [act as one element] distinct elements
*/





****************** Showing LIMITED NUMBER OF rows (lIMIT Operation) ******************

------ Way 1
SELECT DISTINCT [coll_name]
FROM [table_name]
where [condition]
ORDER BY [coll_name] DESC
LIMIT [show];  -----------------------> Show top 3



//*  Example: 
     
SELECT DISTINCT salary
FROM employees

ORDER BY salary desc
LIMIT  3;
*//


---------------- Way 2

SELECT DISTINCT [coll_name]
FROM [table_name]
ORDER BY [coll_name] DESC
LIMIT [offset/drop/index_included], [show]; ----------> 
     
/// Offset optional [no optional means way 1]
/// Index start from 0(zero)



//*  Example: 
     
SELECT DISTINCT salary
FROM employees

ORDER BY salary desc
LIMIT  1, 5; ---------------> 
    
*//




****************** Variations ******************

--------- Div: 

10 DIV 4 = 2    (Integer)
10 / 4   = 2.5  (Float)


--------- Between...AND:

SELECT [coll_name]
FROM [table_name]
# where salary >=1000 AND salary<=10000  ------> OLD APPROACH

WHERE salary BETWEEN 1000 AND 10000      ------> two values are included



--------- NOT Between...AND:

SELECT [coll_name]
FROM [table_name]
# where salary < 1000 AND salary > 10000  ------> OLD APPROACH

WHERE salary NOT BETWEEN 1000 AND 10000      ------> two values are excluded




--------- IN :

SELECT [coll_name]
FROM [table_name]
# where manager_id = 101 OR manager_id = 201 OR manager_id = 301  ------> OLD APPROACH

WHERE manager_id IN(101, 201, 301)     ------>  equal (equal check for few Values)




--------- NOT IN :

WHERE manager_id NOT IN(101, 201, 301)     ------>  not equal




----------------------- LIKE (String pattern Match) ---------------------------------------------

%  (percentage) : 0 to inf Char (as start operation on TOC)
_ (underscore)  : exactaly one char


SELECT [coll_name]
FROM [table_name]
WHERE [coll_name] LIKE "want_to_match"


/* 
       SELECT *
       FROM employees
       WHERE last_name LIKE "%g";
*/


----------------------- Boolean ---------------------------------------------


SELECT [coll_name]
FROM [table_name]
WHERE [coll_name] IS [TRUE or FALSE]







----------------------- Condition Statement (CASE WHEN) ---------------------------
/*

*/

SELECT [coll_name],
       CASE
              WHEN [salary_coll]>2000 THEN 'A'
              WHEN [salary_coll] BETWEEN THEN 'B'
              ELSE 'C'
       END AS 'Salary_rank_Coll_name'
FROM [table_name]
WHERE [condition]






/*
       Numeric,String, DATE function Works Row Wise
       You can use func in SELECT and WHERE

*/



----------------------- Numeric Functions ---------------------------


ABS()         ---->  SELECT ABS([coll_name])

FLOOR()       ---->  SELECT FLOOR([coll_name])

CEIL()       ---->  SELECT CEIL([coll_name])



ROUND(x)/Round(x,D) ------> SELECT ROUND([coll_name])

Example: 
SELECT ROUND(1.34)         ---> 1
SELECT ROUND(1.34, 1)      ---> 1.3
SELECT ROUND(1.45, 1)      ---> 1.5



TRUNCATE(x,D)      -------> SELECT TRUNCATE([coll_name])

Example:  
SELECT TRUNCATE(1.34, 1)      ---> 1.3
SELECT TRUNCATE(1.45, 1)      ---> 1.4 






----------------------- String Functions ---------------------------

UPPER()  
LOWER()
REVERSE()

CONCATE()  ----> concatenation of string 

Example: CONCAT(first_name,' ', last_name) AS full_Name


/// bIG Example

SELECT employee_id,first_name,
		CASE 
       		WHEN salary>=1000 THEN
				CONCAT(
            		salary DIV 1000,' Thousands ',
            		(salary%1000) DIV 100, ' Hundreds ',
            		salary % 100, ' Taka'
            		  )
            WHEN salary>=100  THEN
				CONCAT(
            		(salary) DIV 100, ' Hundreds ',
            		salary % 100, ' Taka'
            		  )	
            ELSE
				CONCAT( 
            		salary % 100, ' Taka'
            		)	
            
		END AS AMOUNT, salary
FROM employees
ORDER BY salary ASC;


///




SUBSTR(str,pos)      ------> SUBSTR(first_name , 3)   [3rd position included] 
                     ------> output(first_name's 3rd index to last)
                     ------> String index count from 1



SUBSTR(str,pos,len)      ------> SUBSTR(first_name , 3, 4)   [From 3rd position and Take 4 index]


LEFT(str, len)           ------> LEFT('abcd', 2) => ab
RIGHT(str,len)           ------> RIGHT('abcd', 2) => cd




----------- LPAD ----------- (Increase string Length)

LPAD(str, len, padstr)    

/// SELECT LPAD('abcd', 8, 'xyz') 
/// -- Output: xyzxabcd  
///            ----



RPAD(str, len, padstr)

/// SELECT RPAD('abcd',6,'x')
/// -- Output:  abcdxx
///                 --




/**** BIG EXAMPLE

SELECT employee_id,
		LOWER(
			CONCAT(
				SUBSTR(first_name,1,2)
        		,'_',            
           	 RIGHT(last_name,2)
          	  )
        ) AS Code_NAME
FROM employees
ORDER BY salary ASC;

-------------------------> MORE WORK ( COUNT THER TOTAL LEn id and put len-4 starts in the code Name )

***/






-----------------------------------------------------------------------
----------------------- DATE TIME Functions ---------------------------
-----------------------------------------------------------------------


NOW()             -----------> returns the current datetime
CURDATE()         -----------> returns the current date
CURTIME()         -----------> returns the current time



DATE(datetime)      --------------> only date part      
TIME(datetime)      --------------> only time part
HOUR(datetime)      --------------> only hour part
MINUTE(datetime)    --------------> only minute part
SECOND(datetime)    --------------> only second part
DAY(datetime)       --------------> only day part
MONTH(datetime)     --------------> only month part
YEAR(datetime)      --------------> only year part




DATEDIFF(datetime1, datetime2)    ------------>  Return number of days
TIMEDIFF(datetime1, datetime2)    ------------>  Return time diff



DATE_ADD(datetime, INTERVAL n unit)                 ///  unit = SECOND /MINUTE /HOUR / DAY /MONTH /YEAR
DATE_SUB(datetime, INTERVAL n unit) 

EXAMPLE:  DATE_ADD(hire_date, INTERVAL 1 DAY)


































